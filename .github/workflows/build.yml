name: Test and release

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch the whole history and tags.
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack@0.5,cargo-deny@0.13,just@1,hurl@4,cargo-edit@0.12
      - run: just test lint
      - uses: docker/setup-buildx-action@v2
      - uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "Europe/Zurich"
      - id: compute_version
        run: echo "version=$(just gen-version)" >> "$GITHUB_OUTPUT"
      - name: Build
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: ghcr.io/optravis-llc/hurlalot_server,ghcr.io/optravis-llc/hurlalot_server:${{ steps.compute_version.outputs.version }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: VERSION=${{ steps.compute_version.outputs.version }}
      - name: Test
        run: |
          docker-compose up -d
          just api-test --verbose
          docker-compose down
      - uses: docker/login-action@v3
        if: github.ref == 'refs/heads/main'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Tag and push
        if: ${{ github.ref_name == 'main' && steps.semantic.outputs.new_release_version != '' }}
        run: |
          git tag v${{ steps.compute_version.outputs.version }}
          git push --tags
          docker push ghcr.io/optravis-llc/hurlalot_server:${{ steps.compute_version.outputs.version }}

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      RUSTFLAGS: "-D warnings"
      RUSTDOCFLAGS: "-D warnings"
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack,cargo-deny,just
      - run: just lint